/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jskj.asset.client.layout;

import com.jskj.asset.client.AssetClientApp;
import com.jskj.asset.client.AssetClientView;
import static com.jskj.asset.client.layout.AssetMessage.ERROR_MESSAGE;
import static com.jskj.asset.client.layout.BaseTask.restTemplate;
import java.util.HashMap;
import java.util.List;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.Task;
import org.springframework.web.util.UriComponentsBuilder;

/**
 *
 * @author 305027939
 */
public abstract class ScanBarPanel extends BasePanel {

    private final static Logger logger = Logger.getLogger(BasePopup.class);
    private final IPopupBuilder popBuilder;
    AssetClientView clientView = (AssetClientView) Application.getInstance(AssetClientApp.class).getMainView();

    /**
     * Creates new form ScanBarPanel
     *
     * @param popBuilder
     */
    public ScanBarPanel(IPopupBuilder popBuilder) {
        initComponents();
        this.popBuilder = popBuilder;
        ((BaseTextField) jTextFieldBarCode).registerIcon(popBuilder.getType(), 40);
    }

    public abstract void closePopup();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldBarCode = new BaseTextField();
        jLabel1 = new javax.swing.JLabel();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.jskj.asset.client.AssetClientApp.class).getContext().getResourceMap(ScanBarPanel.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setName("Form"); // NOI18N

        jTextFieldBarCode.setText(resourceMap.getString("jTextFieldBarCode.text")); // NOI18N
        jTextFieldBarCode.setFocusCycleRoot(true);
        jTextFieldBarCode.setMaximumSize(new java.awt.Dimension(366, 75));
        jTextFieldBarCode.setMinimumSize(new java.awt.Dimension(366, 75));
        jTextFieldBarCode.setName("jTextFieldBarCode"); // NOI18N
        jTextFieldBarCode.setPreferredSize(new java.awt.Dimension(366, 75));
        jTextFieldBarCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBarCodeActionPerformed(evt);
            }
        });

        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addComponent(jTextFieldBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jTextFieldBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldBarCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBarCodeActionPerformed
        new FindDataTask().execute();
    }//GEN-LAST:event_jTextFieldBarCodeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextFieldBarCode;
    // End of variables declaration//GEN-END:variables

    @Override
    public Task reload() {
        return null;
    }

    @Override
    public Task reload(Object param) {
        return null;
    }

    private class FindDataTask extends BaseTask {

        public FindDataTask() {
        }

        @Override
        public Object doBackgrounp() {
            if (popBuilder.getWebServiceURI() != null && !popBuilder.getWebServiceURI().trim().equals("")) {
                try {

                    UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(popBuilder.getWebServiceURI())
                            .queryParam("pagesize", 20).queryParam("pageindex", 1);
                    String barcode = jTextFieldBarCode.getText();
                    if (barcode.length() > 17) {
                        barcode = jTextFieldBarCode.getText().substring(0, 17);   //截取前17位
                    }
                    String conditionSql = popBuilder.getConditionSQL();
                    if (conditionSql.indexOf("#") >= 0) {
                        conditionSql = conditionSql.replaceAll("#", barcode);
                    } else {
                        conditionSql = popBuilder.getConditionSQL() + "\"" + barcode + "\"";
                    }
                    builder.queryParam("conditionSql", conditionSql);

                    HashMap result = restTemplate.getForObject(builder.build().toUri(), HashMap.class);
                    return result;
                } catch (Exception e) {
                    e.printStackTrace();
                    return e;
                }
            }
            return null;
        }

        @Override
        public void onSucceeded(Object object) {
            if (object != null) {
                if (object instanceof Exception) {
                    Exception e = (Exception) object;
                    AssetMessage.ERRORSYS(e.getMessage());
                    logger.error(e);
                }

                if (object instanceof HashMap) {
                    HashMap sourceData = (HashMap) object;
                    Object countObj = sourceData.get("count");
                    Object resultObj = sourceData.get("result");
                    if (resultObj != null && (Integer.parseInt(countObj.toString())) > 0) {
                        if (resultObj instanceof List) {
                            List listResult = (List) resultObj;
                            popBuilder.setBindedMap((HashMap) listResult.get(0));
                        }else{
                           clientView.setStatus("返回数据格式不正确.", ERROR_MESSAGE);
                        }
                    } else {
                        clientView.setStatus("没有查询到数据.", ERROR_MESSAGE);
                    }
                }

            } else {
                clientView.setStatus("远程接口没有返回数据.", ERROR_MESSAGE);
            }
            jTextFieldBarCode.setText("");
        }

    }

    @Action
    public Task search() {
        return new FindDataTask();
    }

    @Action
    public void test() {
        jTextFieldBarCode.setText("123");
    }

}
