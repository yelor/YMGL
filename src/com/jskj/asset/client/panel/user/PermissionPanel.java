/*
 * PermissionPanel.java
 */
package com.jskj.asset.client.panel.user;

import com.jskj.asset.client.AssetClientApp;
import com.jskj.asset.client.bean.entity.Appparam;
import com.jskj.asset.client.bean.entity.DepartmentFindEntity;
import com.jskj.asset.client.bean.entity.DepartmenttbAll;
import com.jskj.asset.client.layout.BasePanel;
import com.jskj.asset.client.layout.AssetMessage;
import com.jskj.asset.client.layout.AssetTableModel;
import com.jskj.asset.client.panel.jichuxinxi.task.BuMenTask;
import com.jskj.asset.client.util.BindTableHelper;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author woderchen
 */
public final class PermissionPanel extends BasePanel {

    private final static Logger logger = Logger.getLogger(PermissionPanel.class);

    private List<DepartmenttbAll> currentPageData;

    private final BindTableHelper<DepartmenttbAll> bindTable;

    /**
     * Creates new form NoFoundPane
     */
    public PermissionPanel() {
        super();
        initComponents();

        currentPageData = new ArrayList();
        bindTable = new BindTableHelper<DepartmenttbAll>(jTableDep, new ArrayList<DepartmenttbAll>());
        bindTable.createTable(new String[][]{{"departmentName", "部门名称", "false"}});

    }

    @Action
    @Override
    public Task reload() {
        return new RefreshTask();
    }

    @Override
    public Task reload(Object param) {
        return null;
    }

    private class RefreshTask extends BuMenTask {

        @Override
        public void onSucceeded(Object object) {
            if (object instanceof Exception) {
                Exception e = (Exception) object;
                AssetMessage.ERRORSYS(e.getMessage());
                logger.error(e);
                return;
            }
            if (object != null && object instanceof DepartmentFindEntity) {
                DepartmentFindEntity depart = (DepartmentFindEntity) object;
                currentPageData = depart.getResult();

                bindTable.refreshData(currentPageData);
            } else {
                logger.error("BumenTask returns null or not a DepartmentFindEntity object.");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ctrlPane = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButtonReload = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDep = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRoles = new javax.swing.JTable();
        jLabelMes = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableObj = new javax.swing.JTable() {

            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 3:
                    return Boolean.class;
                    default:
                    return String.class;
                }
            }
        };

        setName("Form"); // NOI18N

        ctrlPane.setName("ctrlPane"); // NOI18N

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setBorderPainted(false);
        jToolBar1.setName("jToolBar1"); // NOI18N
        jToolBar1.setOpaque(false);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.jskj.asset.client.AssetClientApp.class).getContext().getActionMap(PermissionPanel.class, this);
        jButton1.setAction(actionMap.get("update")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.jskj.asset.client.AssetClientApp.class).getContext().getResourceMap(PermissionPanel.class);
        jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setOpaque(false);
        jToolBar1.add(jButton1);

        jButtonReload.setAction(actionMap.get("reload")); // NOI18N
        jButtonReload.setIcon(resourceMap.getIcon("jButtonReload.icon")); // NOI18N
        jButtonReload.setText(resourceMap.getString("jButtonReload.text")); // NOI18N
        jButtonReload.setBorderPainted(false);
        jButtonReload.setFocusable(false);
        jButtonReload.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButtonReload.setName("jButtonReload"); // NOI18N
        jButtonReload.setOpaque(false);
        jToolBar1.add(jButtonReload);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);
        jToolBar2.setBorderPainted(false);
        jToolBar2.setName("jToolBar2"); // NOI18N
        jToolBar2.setOpaque(false);

        javax.swing.GroupLayout ctrlPaneLayout = new javax.swing.GroupLayout(ctrlPane);
        ctrlPane.setLayout(ctrlPaneLayout);
        ctrlPaneLayout.setHorizontalGroup(
            ctrlPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ctrlPaneLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ctrlPaneLayout.setVerticalGroup(
            ctrlPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
        );

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTableDep.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTableDep.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableDep.setCellEditor(null);
        jTableDep.setName("jTableDep"); // NOI18N
        jTableDep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDepMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableDep);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTableRoles.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTableRoles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        jTableRoles.setName("jTableRoles"); // NOI18N
        jTableRoles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRolesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableRoles);

        jLabelMes.setForeground(resourceMap.getColor("jLabelMes.foreground")); // NOI18N
        jLabelMes.setText(resourceMap.getString("jLabelMes.text")); // NOI18N
        jLabelMes.setName("jLabelMes"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        jTableObj.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableObj.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableObj.setName("jTableObj"); // NOI18N
        jTableObj.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableObjMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTableObj);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ctrlPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelMes, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ctrlPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelMes, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTableDepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDepMouseClicked
        int selectedRow = jTableDep.getSelectedRow();
        if (selectedRow > -1) {
            jTableRoles.clearSelection();
            jTableObj.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{
                        {},
                        {},
                        {},
                        {}
                    },
                    new String[]{}
            ));
            jLabelMes.setText("选择对象:");
            String[] roles = AssetClientApp.getParamNamesByType("角色");
            if (roles != null && roles.length > 0) {

                String[][] rolesData = new String[roles.length][1];
                int i = 0;

                for (String rol : roles) {
                    rolesData[i][0] = rol;
                    i++;
                }

                jTableRoles.setModel(new javax.swing.table.DefaultTableModel(
                        rolesData,
                        new String[]{
                            "角色"
                        }
                ) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                });

            }
        }
    }//GEN-LAST:event_jTableDepMouseClicked

    private boolean isExist(List<Appparam> levelArray, int pid) {
        for (Appparam app : levelArray) {
            if (app.getAppparamId() == pid) {
                return true;
            }
        }
        return false;
    }

    private void jTableRolesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRolesMouseClicked
        int selectRow = jTableRoles.getSelectedRow();
        if (selectRow > -1) {
            Object depV = jTableDep.getValueAt(jTableDep.getSelectedRow(), 0);
            Object roleV = jTableRoles.getValueAt(selectRow, 0);
            jLabelMes.setText("选择对象:【部门】" + depV + " 【角色】" + roleV);

            List<Appparam> models = AssetClientApp.getParamsByType("模块");

            List<Appparam> firstLevelArray = new ArrayList();
            List<Appparam> secLevelArray = new ArrayList();
            List<Appparam> thdLevelArray = new ArrayList();

            if (models != null && models.size() > 0) {
                for (int i = 0; i < models.size(); i++) {
                    Appparam appparam = models.get(i);
                    if (appparam.getAppparamPid() == null || appparam.getAppparamPid() <= 0) {//第一级
                        firstLevelArray.add(appparam);
                    }
                }

                for (int i = 0; i < models.size(); i++) {
                    Appparam appparam = models.get(i);
                    String name = appparam.getAppparamName();
                    if (appparam.getAppparamPid() != null && isExist(firstLevelArray, appparam.getAppparamPid())) {
                        List parentDB = AssetClientApp.getChildParamNameByParentName(name);
                        if (parentDB != null && parentDB.size() > 0) {
                            secLevelArray.add(appparam);
                        } else {
                            thdLevelArray.add(appparam);
                        }
                    }
                }

                for (int i = 0; i < models.size(); i++) {
                    Appparam appparam = models.get(i);
                    if (appparam.getAppparamPid() != null && isExist(secLevelArray, appparam.getAppparamPid())) { //第三级
                        thdLevelArray.add(appparam);
                    }
                }
            }

            List rowDatas = new ArrayList();
            List headDatas = new ArrayList();
            headDatas.add("");
            headDatas.add("");
            headDatas.add("");
            headDatas.add("是否拥有该权限?");

            for (int i = 0; i < firstLevelArray.size(); i++) {
                List columnDatas1 = new ArrayList();
                Appparam appparam1 = firstLevelArray.get(i);
                String name = appparam1.getAppparamName();
                columnDatas1.add(name);
                columnDatas1.add("");
                columnDatas1.add("");
                columnDatas1.add(false);
                rowDatas.add(columnDatas1);
                for (int j = 0; j < secLevelArray.size(); j++) {
                    Appparam appparam2 = secLevelArray.get(j);
                    if (appparam2.getAppparamPid() == appparam1.getAppparamId()) {
                        String name2 = appparam2.getAppparamName();

                        List columnDatas2 = new ArrayList();
                        columnDatas2.add("");
                        columnDatas2.add(name2);
                        columnDatas2.add("");
                        columnDatas2.add(false);
                        rowDatas.add(columnDatas2);
                        //第三级
                        for (int k = 0; k < thdLevelArray.size(); k++) {

                            Appparam appparam3 = thdLevelArray.get(k);
                            if (appparam3.getAppparamPid() == appparam2.getAppparamId()) {
                                String name3 = appparam3.getAppparamName();
                                List columnDatas3 = new ArrayList();
                                columnDatas3.add("");
                                columnDatas3.add("");
                                columnDatas3.add(name3);
                                columnDatas3.add(false);
                                rowDatas.add(columnDatas3);

                                //thdLevelArray.remove(appparam3);
                            }

                        }
                        //secLevelArray.remove(appparam2);
                    }

                }

            }

            List editColumn = new ArrayList();
            editColumn.add(3);
            //显示当前角色权限
            jTableObj.setModel(new AssetTableModel(rowDatas, headDatas, true, editColumn));
            jTableObj.getColumnModel().getColumn(0).setMaxWidth(140);
            jTableObj.getColumnModel().getColumn(0).setMinWidth(140);
            jTableObj.getColumnModel().getColumn(1).setMaxWidth(140);
            jTableObj.getColumnModel().getColumn(1).setMinWidth(140);
            jTableObj.getColumnModel().getColumn(2).setMaxWidth(140);
            jTableObj.getColumnModel().getColumn(2).setMinWidth(140);
            jTableObj.getColumnModel().getColumn(3).setMaxWidth(120);
            jTableObj.getColumnModel().getColumn(3).setMinWidth(120);

        }
    }//GEN-LAST:event_jTableRolesMouseClicked

    private void jTableObjMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableObjMouseClicked
        int selectedC = jTableObj.getSelectedColumn();
        int selectedR = jTableObj.getSelectedRow();
        int total = jTableObj.getRowCount();
        if (selectedC == 3) {
            Object obj = jTableObj.getValueAt(selectedR, selectedC);
            Boolean isCheck = (Boolean) obj;
            if (!jTableObj.getValueAt(selectedR, 0).toString().equals("")) {
                for (int j = selectedR; j < total; j++) {
                    if (j + 1 < total) {
                        if (jTableObj.getValueAt(j + 1, 0).toString().equals("")) {
                            jTableObj.setValueAt(isCheck, j + 1, 3);
                        } else {
                            break;
                        }
                    }
                }
            } else if (!jTableObj.getValueAt(selectedR, 1).toString().equals("")) {
                for (int j = selectedR; j < total; j++) {
                    if (j + 1 < total) {
                        if (jTableObj.getValueAt(j + 1, 1).toString().equals("") && jTableObj.getValueAt(j + 1, 0).toString().equals("")) {
                            jTableObj.setValueAt(isCheck, j + 1, 3);
                        } else {
                            break;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jTableObjMouseClicked

    @Action
    public void update() {

//        SwingUtilities.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                Pkgenerator selectedData = selectedDataFromTable();
//                if (selectedData == null) {
//                    AssetMessage.ERRORSYS("请选择一条数据!");
//                    return;
//                }
//                if (childDialog == null) {
//                    JFrame mainFrame = AssetClientApp.getApplication().getMainFrame();
//                    childDialog = new PkDialog(PermissionPanel.this);
//                    childDialog.setLocationRelativeTo(mainFrame);
//                }
//                childDialog.setUpdatedData(selectedData);
//                AssetClientApp.getApplication().show(childDialog);
//            }
//        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ctrlPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonReload;
    private javax.swing.JLabel jLabelMes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableDep;
    private javax.swing.JTable jTableObj;
    private javax.swing.JTable jTableRoles;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    // End of variables declaration//GEN-END:variables
}
