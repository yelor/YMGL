/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jskj.asset.client.panel;

import com.jskj.asset.client.AssetClientApp;
import com.jskj.asset.client.layout.AssetArrayNodes;
import com.jskj.asset.client.layout.AssetMessage;
import com.jskj.asset.client.layout.AssetNode;
import com.jskj.asset.client.layout.AssetTreeNode;
import com.jskj.asset.client.layout.BaseTreePane;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author 305027939
 */
public class LeftPanel extends BaseTreePane {

    private final static Logger logger = Logger.getLogger(LeftPanel.class);

    /**
     * Creates new form LeftPanel
     */
    public LeftPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        navigatorTree = new javax.swing.JTree();
        jToolBar1 = new javax.swing.JToolBar();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.jskj.asset.client.AssetClientApp.class).getContext().getResourceMap(LeftPanel.class);
        navigatorTree.setFont(resourceMap.getFont("navigatorTree.font")); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("[Loading]");
        navigatorTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        navigatorTree.setAlignmentX(3.0F);
        navigatorTree.setAlignmentY(3.0F);
        navigatorTree.setAutoscrolls(true);
        navigatorTree.setName("navigatorTree"); // NOI18N
        navigatorTree.setRootVisible(false);
        navigatorTree.setRowHeight(25);
        navigatorTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                navigatorTreeMouseClicked(evt);
            }
        });

        setName("Form"); // NOI18N

        jToolBar1.setBackground(resourceMap.getColor("jToolBar1.background")); // NOI18N
        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void navigatorTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_navigatorTreeMouseClicked
        AssetTreeNode selectedNode = (AssetTreeNode) navigatorTree.getLastSelectedPathComponent();  //获取鼠标点击点
        if (selectedNode == null) {
            return;//如果不是树上的节点
        }
        if (selectedNode.isLeaf() && evt.getClickCount() == 2) { //确定是叶节点且是双//击事件。
            Task task = new OpenTabTask(selectedNode);
            task.execute();
            logger.debug("------------>TabPane:" + disTabCount);
        }
    }//GEN-LAST:event_navigatorTreeMouseClicked

    /**
     * @param navigatorTree the navigatorTree to set
     */
    public void setNavigatorTree(javax.swing.JTree navigatorTree) {
        this.navigatorTree = navigatorTree;
    }

    public javax.swing.JTree getNavigatorTree() {
        return navigatorTree;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree navigatorTree;
    // End of variables declaration//GEN-END:variables

    @Action
    @Override
    public Task reload() {
        return new NavigatorPanelTask();
    }

    public void openLink(AssetTreeNode selectedNode) {
        if (selectedNode != null) {
            Task task = new OpenTabTask(selectedNode);
            task.execute();
            logger.debug("OPEN TabPane:" + disTabCount);
        }
    }

    class NavigatorPanelTask extends NavigatorTask {

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.jskj.asset.client.AssetClientApp.class).getContext().getResourceMap(LeftPanel.class);
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.jskj.asset.client.AssetClientApp.class).getContext().getActionMap(this);

        class AssetNodeActionListener implements ActionListener {

            AssetNode node;

            public AssetNodeActionListener(AssetNode node) {
                this.node = node;

            }

            public void actionPerformed(ActionEvent e) {
                AssetTreeNode treeNode = new AssetTreeNode(node);
                openLink(treeNode);
            }

        }

        @Override
        public void onSucceeded(Object object) {
            if (object instanceof Exception) {
                Exception e = (Exception) object;
                AssetMessage.ERRORSYS("读取失败:" + e.getMessage());
                logger.error(e);
            } else {
                AssetArrayNodes nodes = (AssetArrayNodes) object;

                List<AssetNode> assetNodes = nodes.getNodes();

                List<AssetNode> permissionArrMoudle = new ArrayList<AssetNode>();
                int i = 0;
                for (AssetNode node : assetNodes) {
                    String icon = node.getNodeIcon();
                    String name = node.getNodeName();
                    logger.info("loading " + name);
                    //权限控制
                    if (AssetClientApp.permissionMoudle(name)) {
                        permissionArrMoudle.add(node);
                        i++;
                    }
                    javax.swing.JButton leftButton = new javax.swing.JButton();

                    if (icon != null && !icon.trim().equals("")) {
                        leftButton.setText(""); // NOI18N
                        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(icon))); // NOI18N
                        String iconPress = node.getPressedIcon();
                        String iconRollover = node.getRolloverIcon();
                        if (iconPress != null && !iconPress.trim().equals("")) {
                            leftButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(iconPress))); // NOI18N
                        }
                        if (iconRollover != null && !iconRollover.trim().equals("")) {
                            leftButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(iconRollover))); // NOI18N
                        }
                    } else {
                        leftButton.setText(name); // NOI18N
                        leftButton.setName(name);
                    }
                    leftButton.setBorder(null);
                    leftButton.setBorderPainted(false);
                    leftButton.setContentAreaFilled(false);
                    leftButton.setFocusable(false);
                    leftButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                    leftButton.setIconTextGap(0);
                    leftButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
                    leftButton.setName(node.getNodeNo()); // NOI18N
                    leftButton.addActionListener(new AssetNodeActionListener(node));

                    leftButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

                    jToolBar1.add(leftButton);
                }
                repaint();
                validate();

                //如果只有一个模块，就直接打开他
                if (i == 1) {
                    AssetNode openNode = permissionArrMoudle.get(0);
                    AssetTreeNode treeNode = new AssetTreeNode(openNode);
                    openLink(treeNode);
                }

//                navigatorTree.setRootVisible(false);
//                navigatorTree.setModel(new AssetTreeModel(getTreeNode(new AssetTreeNode(nodes.getTopNode()), nodes.getNodes())));
            }
        }

    }

    private AssetTreeNode getTreeNode(AssetTreeNode parent, List<AssetNode> nodes) {
        // DefaultMutableTreeNode treeNodeChild = null;
        if (nodes != null) {
            for (AssetNode node : nodes) {
                //DefaultMutableTreeNode treeNodeChild = new DefaultMutableTreeNode(node.getNodeName());
                AssetTreeNode treeNodeChild = new AssetTreeNode(node);
                List<AssetNode> nodeChild = node.getChildNode();
                if (nodeChild != null) {
                    getTreeNode(treeNodeChild, nodeChild);
                }
                parent.add(treeNodeChild);
            }
        }
        return parent;
    }

    @Override
    public Task reload(Object param) {
        return null;
    }
}
